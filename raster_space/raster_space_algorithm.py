# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RasterSpace
                                 A QGIS plugin
 Estimation of the local space size using raster algebra
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-07-26
        copyright            : (C) 2019 by Timofey Samsonov, Lomonosov MSU Faculty of Geography
        email                : tsamsonov@geogr.msu.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Timofey Samsonov, Lomonosov MSU Faculty of Geography'
__date__ = '2019-07-26'
__copyright__ = '(C) 2019 by Timofey Samsonov, Lomonosov MSU Faculty of Geography'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import math

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsMessageLog,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterVectorLayer,
                       QgsRasterLayer,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)

from osgeo import gdal, ogr, osr
import numpy as np
import os, sys
import rspace
from .scratch import CreateScratchFolder
from qgis import processing
from .WBT.whitebox_tools import WhiteboxTools

def npread(path):
    file = gdal.Open(path)
    bnd = file.GetRasterBand(1)
    return np.array(bnd.ReadAsArray())

class CurvatureFilteringAlgorithm(QgsProcessingAlgorithm):

    INPUT = 'INPUT'
    EXXAG = 'EXXAG'
    DEEPEN = 'DEEPEN'
    SIZE_ELEV = 'SIZE_ELEV'
    ITERATIONS_ELEV = 'ITERATIONS_ELEV'
    MIN_SLOPE = 'MIN_SLOPE'
    SIZE_SLOPE = 'SIZE_SLOPE'
    ITERATIONS_SLOPE = 'ITERATIONS_SLOPE'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CurvatureFilteringAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'curvfiltering'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('DEM Curvature Filtering')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Performs curvature-based DEM filtering to produce DEM for ")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input raster DEM')
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.EXXAG,
                self.tr('Exxageration ratio for mountains'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=1.25,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.DEEPEN,
                self.tr('Deepening ratio for lowlands'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=0.4,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.SIZE_ELEV,
                self.tr('Standard deviation (in cells) to filter elevation'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=1,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.ITERATIONS_ELEV,
                self.tr('Number of iterations to filter elevation'),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=5,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.MIN_SLOPE,
                self.tr('Minimum slope (in degrees) to separate mountains from plains'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=5,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.SIZE_SLOPE,
                self.tr('Standard deviation (in cells) to filter slopes'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=1,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.ITERATIONS_SLOPE,
                self.tr('Number of iterations to filter slope'),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=5,
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Output filtered raster DEM')
            )
        )

    def execute(self, input_path, output_path, exxag, deepen, size_elev, iter_elev,
                min_slope, size_slope, iter_slope, feedback, scratch=None):

        if scratch is None:
            scratch = CreateScratchFolder(os.path.dirname(input_path))

        wbt = WhiteboxTools()
        wbt.set_whitebox_dir(os.path.dirname(os.path.realpath(__file__)) + '/WBT')
        wbt.set_working_dir(scratch)
        wbt.set_verbose_mode(True)

        dem_cur = input_path
        for i in range(iter_elev):
            filtered = f"{scratch}/filtered_{i+1}.tif"
            wbt.gaussian_filter(dem_cur, filtered, size_elev, callback = feedback.pushInfo)
            dem_cur = filtered

        slope = f"{scratch}/slope.tif"
        wbt.slope(dem_cur, slope, callback = feedback.pushInfo)

        mask_cur = f"{scratch}/mask.tif"
        wbt.greater_than(slope, min_slope, mask_cur, callback = feedback.pushInfo)

        for i in range(iter_slope):
            filtered = f"{scratch}/mask_{i+1}.tif"
            wbt.gaussian_filter(mask_cur, filtered, size_slope, callback = feedback.pushInfo)
            mask_cur = filtered

        curv_plan_saga = f"{scratch}/curv_plan.sdat"
        curv_mini_saga = f"{scratch}/curv_mini.sdat"
        curv_maxi_saga = f"{scratch}/curv_maxi.sdat"

        processing.run("saga:slopeaspectcurvature", {
            'ELEVATION': dem_cur,
            'METHOD': 3,
            'C_PLAN': curv_plan_saga,
            'C_MINI': curv_mini_saga,
            'C_MAXI': curv_maxi_saga,
            'SLOPE': f"{scratch}/saga_slope.sdat",
            'ASPECT': f"{scratch}/saga_aspect.sdat",
            'C_GENE': f"{scratch}/saga_cgene.sdat",
            'C_PROF': f"{scratch}/saga_cprof.sdat",
            'C_TANG': f"{scratch}/saga_ctang.sdat",
            'C_LONG': f"{scratch}/saga_clong.sdat",
            'C_CROS': f"{scratch}/saga_ccros.sdat",
            'C_TOTA': f"{scratch}/saga_ctota.sdat",
            'C_ROTO': f"{scratch}/saga_croto.sdat"
        })

        curv_plan = f"{scratch}/curv_plan.tif"
        curv_mini = f"{scratch}/curv_mini.tif"
        curv_maxi = f"{scratch}/curv_maxi.tif"

        processing.run("gdal:translate", {
            'INPUT': curv_plan_saga,
            'OUTPUT': curv_plan
        })

        processing.run("gdal:translate", {
            'INPUT': curv_mini_saga,
            'OUTPUT': curv_mini
        })

        processing.run("gdal:translate", {
            'INPUT': curv_maxi_saga,
            'OUTPUT': curv_maxi
        })

        dem_warped = dem_cur
        # dem_warped = f"{scratch}/dem_warped.tif"
        #
        # processing.run("gdal:warpreproject", {
        #     'INPUT': dem_cur,
        #     'SOURCE_CRS': curv_plan,
        #     'TARGET_CRS': curv_plan,
        #     'TARGET_EXTENT': curv_plan,
        #     'RESAMPLING': 0,
        #     'OUTPUT': dem_warped
        # })

        mask_warped = mask_cur

        # mask_warped = f"{scratch}/mask_warped.tif"
        #
        # processing.run("gdal:warpreproject", {
        #     'INPUT': mask_cur,
        #     'SOURCE_CRS': curv_plan,
        #     'TARGET_CRS': curv_plan,
        #     'TARGET_EXTENT': curv_plan,
        #     'RESAMPLING': 0,
        #     'OUTPUT': mask_warped
        # })

        #
        # processing.run("gdal:warpreproject", {
        #     'INPUT': curv_mini_saga,
        #     'SOURCE_CRS': dem_cur,
        #     'TARGET_CRS': dem_cur,
        #     'TARGET_EXTENT': dem_cur,
        #     'RESAMPLING': 0,
        #     'OUTPUT': curv_plan
        # })
        #
        # processing.run("gdal:warpreproject", {
        #     'INPUT': curv_maxi_saga,
        #     'SOURCE_CRS': dem_cur,
        #     'TARGET_CRS': dem_cur,
        #     'TARGET_EXTENT': dem_cur,
        #     'RESAMPLING': 0,
        #     'OUTPUT': curv_maxi
        # })

        curv_plan_01 = f"{scratch}/curv_plan_01.tif"
        curv_mini_01 = f"{scratch}/curv_mini_01.tif"
        curv_maxi_01 = f"{scratch}/curv_maxi_01.tif"

        wbt.rescale_value_range(curv_plan, curv_plan_01, 0, 0.5, callback = feedback.pushInfo)
        wbt.rescale_value_range(curv_maxi, curv_maxi_01, 0, 0.5, callback = feedback.pushInfo)
        # wbt.rescale_value_range(curv_maxi, curv_maxi_01, 0, 1, callback = feedback.pushInfo)
        wbt.rescale_value_range(curv_mini, curv_mini_01, 0, 1, callback = feedback.pushInfo)

        ridges_int = f"{scratch}/ridges_int.tif"
        wbt.find_ridges(dem_warped, ridges_int)

        ridges_zero = f"{scratch}/ridges_zero.tif"
        wbt.convert_nodata_to_zero(ridges_int, ridges_zero)

        ridges = ridges_zero

        # ridges = f"{scratch}/ridges.tif"
        #
        # processing.run("gdal:warpreproject", {
        #     'INPUT': ridges_zero,
        #     'SOURCE_CRS': ridges_zero,
        #     'TARGET_CRS': ridges_zero,
        #     'TARGET_EXTENT': ridges_zero,
        #     'RESAMPLING': 0,
        #     'DATA_TYPE': 6,
        #     'OUTPUT': ridges
        # })

        ridges_perc = f"{scratch}/ridges_perc.tif"
        wbt.gaussian_filter(ridges, ridges_perc, size_slope)

        ridges_weight = f"{scratch}/ridges_weight.tif"
        wbt.rescale_value_range(ridges_perc, ridges_weight, 0, 1)

        npdem = npread(dem_warped).astype(np.float32)
        npcurvplan = npread(curv_plan_01)
        npcurvmini = npread(curv_mini_01)
        npcurvmaxi = npread(curv_maxi_01)
        npmask = npread(mask_warped)
        nprw = npread(ridges_weight)

        feedback.pushInfo('DEM minimum: ' + str(np.min(npdem)))

        file = gdal.Open(dem_warped)
        bnd = file.GetRasterBand(1)
        nodata = bnd.GetNoDataValue()

        npdem[npdem == nodata] = np.nan
        znorm = npdem - np.nanmin(npdem)

        npmount = exxag * znorm * (npcurvplan + npcurvmaxi) * nprw + (1 - (npcurvplan + npcurvmaxi) * nprw) * znorm
        # npmount = exxag * znorm * npcurvmaxi + (1 - npcurvmaxi) * znorm
        nplow = deepen * znorm * (1 - npcurvmini) + npcurvmini * znorm
        npres = npmount * npmask + (1 - npmask) * nplow

        drv = gdal.GetDriverByName('GTiff')
        input_gdal = gdal.Open(dem_warped)

        dst_ds = drv.Create(output_path,
                            input_gdal.RasterXSize, input_gdal.RasterYSize, 1,
                            gdal.GetDataTypeByName('Int16'))
        gt = input_gdal.GetGeoTransform()
        prj = input_gdal.GetProjectionRef()
        dst_ds.SetGeoTransform(gt)
        dst_ds.SetProjection(prj)

        dstband = dst_ds.GetRasterBand(1)
        dstband.SetNoDataValue(nodata)
        dstband.WriteArray(npres.astype(np.int16), 0, 0)
        dstband.FlushCache()

        return

    def processAlgorithm(self, parameters, context, feedback):

        input = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        exxag = self.parameterAsDouble(parameters, self.EXXAG, context)
        deepen = self.parameterAsDouble(parameters, self.DEEPEN, context)
        size_elev = self.parameterAsDouble(parameters, self.SIZE_ELEV, context)
        iter_elev = self.parameterAsInt(parameters, self.ITERATIONS_ELEV, context)
        min_slope = self.parameterAsDouble(parameters, self.MIN_SLOPE, context)
        size_slope = self.parameterAsDouble(parameters, self.SIZE_SLOPE, context)
        iter_slope = self.parameterAsInt(parameters, self.ITERATIONS_SLOPE, context)
        output = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        scratch = CreateScratchFolder(os.path.dirname(input.dataProvider().dataSourceUri()))

        self.execute(input.dataProvider().dataSourceUri(), output,
                     exxag, deepen, size_elev, iter_elev, min_slope, size_slope, iter_slope, feedback, scratch)

        return {self.OUTPUT: output}

class SpaceWidthAlgorithmRaster(QgsProcessingAlgorithm):

    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SpaceWidthAlgorithmRaster()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'spacewidthraster'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Space Width (raster)')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Estimates the free space at each pixel center using the maximum width approach")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input obstacles raster layer')
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Output width raster')
            )
        )

    def execute(self, input_path, output_path, feedback, scratch=None, heights=None):
        input_gdal = gdal.Open(input_path)
        input_band = input_gdal.GetRasterBand(1)

        drv = gdal.GetDriverByName('GTiff')

        nbands = 2
        if scratch is None:
            scratch = CreateScratchFolder(os.path.dirname(input_path))
            nbands = 1

        outdist = f"{scratch}/dist.tif"

        feedback.pushInfo(outdist)

        dst_ds = drv.Create(outdist,
                            input_gdal.RasterXSize, input_gdal.RasterYSize, 1,
                            gdal.GetDataTypeByName('Float32'))

        gt = input_gdal.GetGeoTransform()
        prj = input_gdal.GetProjectionRef()

        dst_ds.SetGeoTransform(gt)
        dst_ds.SetProjection(prj)

        dstband = dst_ds.GetRasterBand(1)

        gdal.ComputeProximity(input_band, dstband, ["DISTUNITS=GEO"])
        dstband.FlushCache()

        dist = gdal.Open(outdist)

        if dist is None:
            res0 = None
            QgsMessageLog.logMessage('Unable to open ' + outdist)
        else:

            npdist = np.array(dstband.ReadAsArray())

            maxval = np.max(npdist)

            feedback.pushInfo('MAX DISTANCE: ' + str(maxval))

            if (maxval == 0):
                res0 = None
                feedback.pushInfo('OOPS')
            else:
                if (heights is None):
                    heights = np.full(npdist.shape, 0)

                nodata = -1

                res0 = rspace.estimate_width(npdist, heights, gt[1], nodata)
                npres = np.reshape(np.array(res0[0]), npdist.shape)

                feedback.pushInfo('WIDTH MEDIAN: ' + str(np.median(npres)))
                feedback.pushInfo('WIDTH IQR: ' + str(np.quantile(npres, 0.25)) + ' - ' + str(np.quantile(npres, 0.75)))


                res = drv.Create(output_path,
                                 input_gdal.RasterXSize, input_gdal.RasterYSize, nbands,
                                 gdal.GetDataTypeByName('Float32'))

                res.SetGeoTransform(gt)
                res.SetProjection(prj)

                outband = res.GetRasterBand(1)
                outband.WriteArray(npres, 0, 0)
                outband.FlushCache()
                outband.SetNoDataValue(-1)

                nprop = np.reshape(np.array(res0[1]), npdist.shape)

                if (nbands == 2):
                    outband = res.GetRasterBand(2)
                    outband.WriteArray(nprop, 0, 0)
                    outband.FlushCache()
                    outband.SetNoDataValue(-1)

                outheight = f"{scratch}/propheights.tif"

                prop = drv.Create(outheight,
                                 input_gdal.RasterXSize, input_gdal.RasterYSize, 1,
                                 gdal.GetDataTypeByName('Float32'))

                prop.SetGeoTransform(gt)
                prop.SetProjection(prj)

                propband = prop.GetRasterBand(1)
                propband.WriteArray(nprop, 0, 0)
                propband.FlushCache()
                propband.SetNoDataValue(-1)

        return res0

    def processAlgorithm(self, parameters, context, feedback):

        input = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        output = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        scratch = CreateScratchFolder(os.path.dirname(input.dataProvider().dataSourceUri()))

        self.execute(input.dataProvider().dataSourceUri(), output, feedback, scratch)

        return {self.OUTPUT: output}

class SpaceWidthAlgorithmVector(QgsProcessingAlgorithm):

    INPUT = 'INPUT'
    RES = 'RES'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SpaceWidthAlgorithmVector()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'spacewidthvector'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Space Width (vector)')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Estimates the free space at each pixel center using the maximum width approach")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                self.tr('Input obstacles vector layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.RES,
                self.tr('Raster resolution, m'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=10,
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Output width raster')
            )
        )

    def execute(self, input, output, res, feedback, scratch=None):
        PINF = -3.402823466e+38

        ext = input.sourceExtent()
        Xmin = ext.xMinimum() + res
        Xmax = ext.xMaximum() - res
        Ymin = ext.yMinimum() + res
        Ymax = ext.yMaximum() - res

        outRasterSRS = osr.SpatialReference()
        srs = input.sourceCrs()
        wkt = srs.toWkt()
        outRasterSRS.ImportFromWkt(wkt)

        opts = gdal.RasterizeOptions(outputBounds=[Xmin, Ymin, Xmax, Ymax],
                                     xRes=res, yRes=res, format="GTiff", burnValues=[1], outputSRS=outRasterSRS)

        if scratch is None:
            scratch = CreateScratchFolder(os.path.dirname(input.dataProvider().dataSourceUri()))

        rasterized = f"{scratch}/rasterized.tif"

        feedback.pushInfo(rasterized)

        gdal.Rasterize(rasterized, input.dataProvider().dataSourceUri(), options=opts)

        swar = SpaceWidthAlgorithmRaster()

        swar.execute(rasterized, output, feedback, scratch)

        return

    def processAlgorithm(self, parameters, context, feedback):

        input = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        res = self.parameterAsDouble(parameters, self.RES, context)
        output = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        scratch = CreateScratchFolder(os.path.dirname(input.dataProvider().dataSourceUri()))

        self.execute(input, output, res, feedback, scratch)

        return {self.OUTPUT: output}

class DEMGranularityAlgorithm(QgsProcessingAlgorithm):

    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DEMGranularityAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'demgranularity'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Raster DEM Granularity')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Estimates the granularity of raster DEM as width of a space between surface-specific points")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input raster DEM')
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Output granularity raster')
            )
        )

    def execute(self, input_path, output_path, feedback, scratch=None):

        if scratch is None:
            scratch = CreateScratchFolder(os.path.dirname(input_path))

        wbt = WhiteboxTools()
        wbt.set_whitebox_dir(os.path.dirname(os.path.realpath(__file__)) + '/WBT')
        wbt.set_working_dir(scratch)
        wbt.set_verbose_mode(False)

        specpts = f"{scratch}/spec.sdat"

        processing.run("saga:surfacespecificpoints", {
            'ELEVATION': input_path,
            'METHOD': 0,
            'THRESHOLD': 0,
            'RESULT': specpts
        })

        thwg = f"{scratch}/thwg.tif"

        processing.run("qgis:rastercalculator", {
            'EXPRESSION': '"spec@1" = 1',
            'LAYERS': [specpts],
            'OUTPUT': thwg
        })

        thalwegs = f"{scratch}/thalwegs.tif"

        wbt.line_thinning('thwg.tif', 'thalwegs.tif', feedback.pushInfo)

        thalwegs_null = f"{scratch}/thalwegs_null.tif"

        wbt.set_nodata_value(thalwegs, thalwegs_null, 0)

        thalwegs3d = f"{scratch}/thalwegs3d.tif"

        wbt.multiply(input_path, thalwegs_null, thalwegs3d)

        basepts = f"{scratch}/basepts.shp"

        processing.run("native:pixelstopoints", {
            'INPUT_RASTER': thalwegs3d,
            'RASTER_BAND': 1,
            'FIELD_NAME': 'VALUE',
            'OUTPUT': basepts
        })

        base = f"{scratch}/base.tif"
        basetin = f"{scratch}/basetin.shp"

        inp = gdal.Open(input_path)

        processing.run("qgis:tininterpolation", {
            'INTERPOLATION_DATA': basepts + '::~::0::~::0::~::0',
            'METHOD': 0,
            'EXTENT': input_path,
            'PIXEL_SIZE': inp.GetGeoTransform()[1],
            'COLUMNS': 0,
            'ROWS': 0,
            'TRIANGULATION': basetin,
            'OUTPUT': base})

        basep = f"{scratch}/basep.tif"

        processing.run("gdal:warpreproject", {
            'INPUT': base,
            'SOURCE_CRS': input_path,
            'TARGET_CRS': input_path,
            'TARGET_EXTENT': input_path,
            'RESAMPLING' : 0,
            'OUTPUT': basep
        })

        heights = f"{scratch}/heights.tif"

        wbt.subtract(input_path, basep, heights, feedback.pushInfo)

        gheights = gdal.Open(heights)

        hgtbnd = gheights.GetRasterBand(1)
        nodata = hgtbnd.GetNoDataValue()

        npheights = hgtbnd.ReadAsArray()
        npheights[npheights == nodata] = np.nan

        npheights_abs = np.absolute(npheights)
        npheights_abs[npheights_abs == np.nan] = -1


        swar = SpaceWidthAlgorithmRaster()

        res = swar.execute(thalwegs, output_path, feedback, scratch, heights = npheights_abs)

        npwidths = np.reshape(np.array(res[0]), npheights.shape)
        npwidths[npwidths == -1] = np.nan

        npweights = np.reshape(np.array(res[1]), npheights.shape)
        npweights[npweights == -1] = np.nan

        indices = np.logical_and(~np.isnan(npweights), ~np.isnan(npwidths))

        avewidth = np.average(npwidths[indices], weights = npweights[indices])

        feedback.pushInfo('WEIGHTED AVERAGE WIDTH: ' + str(round(avewidth, 0)))

        feedback.pushInfo('MEDIAN SCALE: 1:' + str(round(np.median(npwidths[indices]) * 200, 0)))

        feedback.pushInfo('WEIGHTED AVERAGE SCALE: 1:' + str(round(avewidth * 200, 0)))

        return

    def processAlgorithm(self, parameters, context, feedback):

        input = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        output = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        scratch = CreateScratchFolder(os.path.dirname(input.dataProvider().dataSourceUri()))

        self.execute(input.dataProvider().dataSourceUri(), output, feedback, scratch)

        return {self.OUTPUT: output}

class SpaceWidthAlgorithmUrban(QgsProcessingAlgorithm):
    """
        This is an example algorithm that takes a vector layer and
        creates a new identical one.
        It is meant to be used as an example of how to create your own
        algorithms and explain methods and variables used to do it. An
        algorithm like this will be available in all elements, and there
        is not need for additional work.
        All Processing algorithms should extend the QgsProcessingAlgorithm
        class.
        """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INBLDS = 'INPUT'
    INVEG = 'INPUTFULL'
    NDIR = 'NDIR'
    DIST = 'DIST'
    THREADS = 'THREADS'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SpaceWidthAlgorithmUrban()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'spacewidthurban'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Space Width (urban)')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Estimates the free space at each pixel center using the maximum width approach. Uses raster input")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INBLDS,
                self.tr('Input buildings raster'),
                [QgsProcessing.TypeRaster]
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INVEG,
                self.tr('Input vegetation raster'),
                [QgsProcessing.TypeRaster]
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.NDIR,
                self.tr('Number of directions'),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=360,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.DIST,
                self.tr('Maximum distance, raster units'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=10000,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.THREADS,
                self.tr('Number of threads (if ≤0 then the number of hardware processor cores is used)'),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=0,
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT,
                self.tr('Output space geometry raster')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):

        buildings = self.parameterAsRasterLayer(parameters, self.INBLDS, context)
        vegetation = self.parameterAsRasterLayer(parameters, self.INVEG, context)
        ndirs = self.parameterAsInt(parameters, self.NDIR, context)
        dist = self.parameterAsDouble(parameters, self.DIST, context)
        threads = self.parameterAsInt(parameters, self.THREADS, context)
        output = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        PINF = -3.402823466e+38

        wbt = WhiteboxTools()
        wbt.set_whitebox_dir('/Users/tsamsonov/GitHub/raster-space/raster_space/WBT/')
        wbt.set_verbose_mode(False)

        outRasterSRS = osr.SpatialReference()
        srs = buildings.crs()
        wkt = srs.toWkt()
        outRasterSRS.ImportFromWkt(wkt)

        drv = gdal.GetDriverByName('GTiff')

        bld_ds = gdal.Open(buildings.dataProvider().dataSourceUri())
        srcband_buildings = bld_ds.GetRasterBand(1)
        outblds = '/Users/tsamsonov/GitHub/raster-space/dist_buildings.tif'
        bld_dist_ds = drv.Create(outblds,
                                bld_ds.RasterXSize, bld_ds.RasterYSize, 1,
                                gdal.GetDataTypeByName('Float32'))

        bld_dist_ds.SetGeoTransform(bld_ds.GetGeoTransform())
        bld_dist_ds.SetProjection(bld_ds.GetProjectionRef())
        dstband_blds = bld_dist_ds.GetRasterBand(1)
        gdal.ComputeProximity(srcband_buildings, dstband_blds, ["DISTUNITS=GEO"])

        npdist_buildings = np.array(dstband_blds.ReadAsArray())  # length testing

        obst_ds = gdal.Open(vegetation.dataProvider().dataSourceUri())
        srcband_obstacles = obst_ds.GetRasterBand(1)
        outobst = '/Users/tsamsonov/GitHub/raster-space/dist_obstacles.tif'
        obst_dist_ds = drv.Create(outobst,
                                  obst_ds.RasterXSize, obst_ds.RasterYSize, 1,
                                  gdal.GetDataTypeByName('Float32'))

        obst_dist_ds.SetGeoTransform(obst_ds.GetGeoTransform())
        obst_dist_ds.SetProjection(obst_ds.GetProjectionRef())
        dstband_obst = obst_dist_ds.GetRasterBand(1)
        gdal.ComputeProximity(srcband_obstacles, dstband_obst, ["DISTUNITS=GEO"])
        npdist_obstacles = np.array(dstband_obst.ReadAsArray())  # length testing

        if npdist_buildings is None:
            QgsMessageLog.logMessage('Unable to open ' + outobst)
        else:

            feedback.pushInfo('Building allocation...')
            buildings_alloc = '/Users/tsamsonov/GitHub/raster-space/bld_alloc.tif'
            wbt.euclidean_allocation(buildings.dataProvider().dataSourceUri(), buildings_alloc)

            hgtfile_blds = gdal.Open(buildings_alloc)
            hgtband_blds = hgtfile_blds.GetRasterBand(1)
            npheight_blds = np.array(hgtband_blds.ReadAsArray())

            feedback.pushInfo('Vegetation allocation...')
            vegetation_alloc = '/Users/tsamsonov/GitHub/raster-space/veg_alloc.tif'
            wbt.euclidean_allocation(vegetation.dataProvider().dataSourceUri(), vegetation_alloc)

            hgtfile_veg = gdal.Open(vegetation_alloc)
            hgtband_veg = hgtfile_veg.GetRasterBand(1)
            npheight_veg = np.array(hgtband_veg.ReadAsArray())

            nodata = -1.0

            res = drv.Create(output,
                             bld_ds.RasterXSize, bld_ds.RasterYSize, 16,
                             gdal.GetDataTypeByName('Float32'))

            res.SetGeoTransform(bld_ds.GetGeoTransform())
            res.SetProjection(bld_ds.GetProjectionRef())

            StepX = bld_ds.GetGeoTransform()[1]

            npres = rspace.estimate_space(npdist_buildings, npheight_blds, npdist_obstacles, npheight_veg,
                                   StepX, nodata, ndirs, dist, threads, feedback.pushInfo, feedback.setProgress)

            vars = {0: 'Width', 1: 'Height', 2: 'H/W Ratio', 3: 'Built', 4: 'Offset', 5: 'Sky View Factor', 6: 'Dominant',
                    7: 'Length 1', 8: 'Direction 1', 9: 'Position 1', 10: 'Average Width 1',
                    11: 'Average Height 1', 12: 'Average H/W Ratio 1', 13: 'Average Built 1',
                    14: 'Average Offset 1', 15: 'Average Sky View Factor 1'}

            for i in vars:
                outband = res.GetRasterBand(i+1)
                outband.SetDescription(vars[i])
                outband.WriteArray(npres[i, :, :], 0, 0)
                outband.FlushCache()
                outband.SetNoDataValue(-1)

        return {self.OUTPUT: output}

